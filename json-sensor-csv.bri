#!/usr/bin/env bright

/*

Module:	json-sensor-csv.bri

Function:
	Extract sensor data from a JSON file as CSV.

Copyright:
	See LICENSE file.

Author:
	Terry Moore, MCCI Corporation

Description:
	This function extracts data from an influxdb JSON file generated
	from the I See Change data set for a given sensor.

*/

/*
|| The version number
*/
if (!(.VERSION in globals()))
	VERSION = "0.1.0";
if (!(.COPYRIGHT in globals()))
	COPYRIGHT = "Copyright (C) 2019, MCCI Corporation";

/*
|| Load MCCI Bright Library -- This can come from environment MCCIBRIGHT_LIB
|| (conforming to the Windows MCCIConf naming conventions).
||
|| Also compatible with the library existing in the current directory or 
|| already loaded.
*/
if(!(.Lib in globals()))
	{
	local BRIGHTLIB = getenv("MCCIBRIGHT_LIB");
	local MCCIBRIGHTLIB_root = (BRIGHTLIB == NULL ? "" : BRIGHTLIB .. "/") .. "mcci_v1.br"
	// try compiled form
	local tLib, sError = dofile(MCCIBRIGHTLIB_root .. "o");
	if (sError != NULL)
		{
		tLib, sError = dofile(MCCIBRIGHTLIB_root .. "i");
		if (sError != NULL)
	    		{
	    		assert(FALSE,
				"mcci_v1.bri not found/readable: " .. sError .. ". "..
				" Set MCCIBRIGHT_LIB to the directory."
				);
			}
	    	}
	assert(Lib != NULL, "mcci_v1.bri load failed!")
	}


/*

Name:	json_getbson()

Function:
	Return the Bright equivalent of a JSON string.

Definition:
	function json_getbson(
		STRING sJson
		) -> STRING;

Description:
	The input string is converted to a Bright object
	representation, and returned as a string.

*/

function json_getbson(sJson)
	{
	// 1) convert [] to {}
	local sBson = gsub(sJson, "%[", "{");
	sBson = gsub(sBson, "%]", "}");
	// 2) convert "string": to [ "string" ] =
	sBson = gsub(sBson, "(\"[^\"]*\")%s*:", "[ %1 ] =" )
	sBson = gsub(sBson, "([^\"]*)(\"[^\"]*\")", 
			function (notString, String)
				{
				return gsub(notString, "(%W)null(%W)", "%1NULL%2")..String;
				}
			);
	sBson = gsub(sBson, "\"([^\"]*)$",
			function(notString) 
				{
				return "\""..gsub(notString, "(%W)null(%W)", "%1NULL%2");
				});
	return sBson;
	}

function filetostring(sF)
	{
	local hFile, sError;
	hFile, sError = openfile(sF, "r");
	if (hFile == NULL) return NULL, sError;
	local sResult;
	sResult, sError=read(hFile, "*a");
	closefile(hFile);
	return sResult, sError;
	}

function interpolateHeaders(tRow)
	{
	local iHeader = getn(tRow);
	local nHeader;
	local tHeader = {};

	for i=0, iHeader-1 do
		tHeader[i] = tRow[i];	// copy time.
	
	nHeader = iHeader;

	for i=1, iHeader-1 do
		{
		tHeader[iHeader + 0] = tRow[i] .. " (min)";
		tHeader[iHeader + 1] = tRow[i] .. " (max)";
		iHeader = iHeader + 2;
		}

	return tHeader, nHeader;
	}

function findHour(tData, iStart)
	{
	local hour = floor(tData[iStart][0] * 24);
	local lastt = (hour + 1) / 24;
	local lasti = getn(tData) - 1;

	for i = iStart + 1, lasti do
		{
		if (tData[i][0] >= lastt)
			return i - 1;
		}

	return lasti;
	}

function getHourlyData(tData, iStart, iEnd, nHeader)
	{
	local tResult = {};

	// fill in hourly data
	if (iEnd < getn(tData) - 1)
		{
		local tPrev = tData[iEnd];
		local tThis = tData[iEnd+1];

		local tThisTime = tThis[0];
		local tLastTime = tPrev[0];
		local dt = tThisTime - tLastTime;
		local tThisHour = floor(tThisTime * 24) / 24;
		local delta_tHour = tThisHour - tLastTime;

		// (y-y0)/dy = (t-t0)/dt
		// y-y0 = (t - t0) * dy/dt
		// y = dy/dt * (t - t0) + y0
		
		tResult[0] = tThisHour;
		for i = 1, nHeader - 1 do
			{
			if (i in tThis && i in tPrev && tThis[i] != NULL && tPrev[i] != NULL)
				{
				local y0 = tPrev[i];
				local dy = tThis[i] - y0;
				tResult[i] = y0 + dy / dt * delta_tHour ;
				}
			else
				tResult[i] = NULL;
			}
		}
	else
		{
		local tThis = tData[iEnd];

		for i = 0, nHeader - 1 do
			tResult[i] = tThis[i];
		}

	for iRow=iStart, iEnd do
		{
		local tRow = tData[iRow];

		for i = 1, getn(tRow) - 1 do
			{
			local tCandidate;
			
			if (i in tRow)
				tCandidate = tRow[i];
			else
				tCandidate = NULL;
			for k = 0, 1 do
				{
				local j = nHeader + 2 * (i - 1) + k;
				local tVal;

				// set starting value
				if (j in tResult)
					tVal = tResult[j];
				else
					tVal = NULL;

				// k even: min; odd: max
				if (tVal == NULL)
					tVal = tCandidate;
				else if (tCandidate != NULL)
					{
					if (k == 0)
						{
						if (tVal > tCandidate)
							tVal = tCandidate;
						}
					else
						{
						if (tVal < tCandidate)
							tVal = tCandidate;
						}
					}

				tResult[j] = tVal;
				}
			}
		}

	return tResult;
	}

/*

Name:	putRow()

Function:
	Output a row to the STDOUT.

Definition:
	function putRow(TABLE tRow) => NULL or STRING

Description:
	The data is output as a properly-formatted CSV string.

Returns:
	putRow() returns whatever the terminal write() returns.

*/

function putRow(tRow)
	{
	local s;

	s = "";
	for i = 0, getn(tRow)-1 do
		{
		s = s .. 
			(i > 0 ? "," : "") ..
			csvQuote(tRow[i]);
		}

	return write(_STDOUT, s.."\n");
	}

function csvQuote(v)
	{
	if (type(v) == "string")
		return "\"" .. gsub(v, "\"", "\"\"") .. "\"";
	else if (v == NULL)
		return "";
	else
		return tostring(v);
	}

function main(args)
	{
	// args[1] is the input JSON file.
	// args[2] if present selects the sensor
	local sSensor; // name of the column with our data
	local iVar; // index of the column with our data

	if (getn(args) < 2)
		{
		write(_STDERR, "too few arguments\n");
		exit(1);
		}

	if (getn(args) < 3)
		{
		sSensor = "-";
		}
	else
		sSensor = args[2];

	local sJson, sError;
	sJson, sError = filetostring(args[1]);

	if (sError)
		{
		write(_STDERR, format("can't read %s: %s\n", args[1], sError));
		exit(1);
		}

	local tBson = dostring("return ".. json_getbson(sJson));

	local tAllSeries = tBson.results[0].series;
	local iSeries;
	if (sSensor == "-")
		iSeries = 0;
	else
		{
		iSeries = -1;
		for i = 0, getn(tAllSeries) - 1 do
			{
			local tSeries = tAllSeries[i];
			local tTags = tSeries.tags;
			if ("displayName" in tTags && tTags.displayName == sSensor)
				{
				iSeries = i;
				break;
				}
			}
		if (iSeries < 0)
			{
			write(_STDERR, format("couldn't find displayName: %s\n", sSensor));
			exit(1);
			}
		}
	local tSeries = tAllSeries[iSeries];
	local tHeader, nHeader = interpolateHeaders(tSeries.columns);

	putRow(tHeader);

	// we know column[0] is the time; we'll output as an excel date
	// the UTC epoch is 25569 for Excel
	local excelEpoch = 25569

	local tValues = tSeries.values;
	for i = 0, getn(tValues)-1 do
		{
		local row = tValues[i];

		local tDate, sErr, tParse = %Lib.ParseDateString(gsub(row[0], "^(.*)T(.*)Z", "%1 %2"));
		if (tDate == NULL)
			{
			print(sErr);
			%Lib.Pretty(.tParse, tParse);
			}

		row[0] = (%Lib.ParsedDateToPosix(tDate)/(24*60*60) + excelEpoch);
		}

	// output blocks of hourly data, preceded by summary
	local iFirst = 0;
	while (iFirst < getn(tValues))
		{
		local iLast = findHour(tValues, iFirst);

		for i = iFirst, iLast do
			putRow(tValues[i]);

		putRow(getHourlyData(tValues, iFirst, iLast, nHeader));

		iFirst = iLast + 1;
		}

	return 0;
	}
