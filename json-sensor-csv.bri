#!/usr/bin/env bright

/*

Module:	json-sensor-csv.bri

Function:
	Extract sensor data from a JSON file as CSV.

Copyright:
	See LICENSE file.

Author:
	Terry Moore, MCCI Corporation

Description:
	This function compensates for the limited resolution of over-the-air
	and in-database power kWh counts, by searching the database looking for
	roll-overs (where the next count is less than the previous count). The
	count is then multiplied by the maximum and added to the last value,
	giving the "end value". The beginning value is then subtracted, giving
	the total.

*/

/*
|| The version number
*/
if (!(.VERSION in globals()))
	VERSION = "0.1.0";
if (!(.COPYRIGHT in globals()))
	COPYRIGHT = "Copyright (C) 2019, MCCI Corporation";

/*
|| Load MCCI Bright Library -- This can come from environment MCCIBRIGHT_LIB
|| (conforming to the Windows MCCIConf naming conventions).
||
|| Also compatible with the library existing in the current directory or 
|| already loaded.
*/
if(!(.Lib in globals()))
	{
	local BRIGHTLIB = getenv("MCCIBRIGHT_LIB");
	local MCCIBRIGHTLIB_root = (BRIGHTLIB == NULL ? "" : BRIGHTLIB .. "/") .. "mcci_v1.br"
	// try compiled form
	local tLib, sError = dofile(MCCIBRIGHTLIB_root .. "o");
	if (sError != NULL)
		{
		tLib, sError = dofile(MCCIBRIGHTLIB_root .. "i");
		if (sError != NULL)
	    		{
	    		assert(FALSE,
				"mcci_v1.bri not found/readable: " .. sError .. ". "..
				" Set MCCIBRIGHT_LIB to the directory."
				);
			}
	    	}
	assert(Lib != NULL, "mcci_v1.bri load failed!")
	}


/*

Name:	json_getbson()

Function:
	Return the Bright equivalent of a JSON string.

Definition:
	function json_getbson(
		STRING sJson
		) -> STRING;

Description:
	The input string is converted to a Bright object
	representation, and returned as a string.

*/

function json_getbson(sJson)
	{
	// 1) convert [] to {}
	local sBson = gsub(sJson, "%[", "{");
	sBson = gsub(sBson, "%]", "}");
	// 2) convert "string": to [ "string" ] =
	sBson = gsub(sBson, "(\"[^\"]*\")%s*:", "[ %1 ] =" )
	sBson = gsub(sBson, "([^\"]*)(\"[^\"]*\")", 
			function (notString, String)
				{
				return gsub(notString, "(%W)null(%W)", "%1NULL%2")..String;
				}
			);
	sBson = gsub(sBson, "\"([^\"]*)$",
			function(notString) 
				{
				return "\""..gsub(notString, "(%W)null(%W)", "%1NULL%2");
				});
	return sBson;
	}

function filetostring(sF)
	{
	local hFile, sError;
	hFile, sError = openfile(sF, "r");
	if (hFile == NULL) return NULL, sError;
	local sResult;
	sResult, sError=read(hFile, "*a");
	closefile(hFile);
	return sResult, sError;
	}

function getPower(tSeries, sVar, kRollover)
	{
	// find index of powerUsed
	for iName, vName in tSeries.columns do
		{
		if (vName == sVar)
			{
			iVar = iName;
			break;
			}
		}

	local tValues = tSeries.values;

	local nRollovers = 0;

	for i = 1, getn(tValues)-1 do
		{
		if (tValues[i][iVar] < tValues[i-1][iVar])
			nRollovers = nRollovers + 1;
		}

	local nTotalPower;

	nTotalPower = nRollovers * 65536 * kRollover + tValues[getn(tValues)-1][iVar] - tValues[0][iVar];

	return nTotalPower, tValues[0][0], tValues[getn(tValues)-1][0];
	}

function putRow(tRow)
	{
	local s;

	s = "";
	for i = 0, getn(tRow)-1 do
		{
		s = s .. 
			(i > 0 ? "," : "") ..
			csvQuote(tRow[i]);
		}

	write(_STDOUT, s.."\n");
	}

function csvQuote(v)
	{
	if (type(v) == "string")
		return "\"" .. gsub(v, "\"", "\"\"") .. "\"";
	else if (v == NULL)
		return "";
	else
		return tostring(v);
	}

function main(args)
	{
	// args[1] is the input JSON file.
	// args[2] if present selects the sensor
	local sSensor; // name of the column with our data
	local iVar; // index of the column with our data

	if (getn(args) < 2)
		{
		write(_STDERR, "too few arguments\n");
		exit(1);
		}

	if (getn(args) < 3)
		{
		sSensor = "-";
		}
	else
		sSensor = args[2];

	local sJson, sError;
	sJson, sError = filetostring(args[1]);

	if (sError)
		{
		write(_STDERR, format("can't read %s: %s\n", args[1], sError));
		exit(1);
		}

	local tBson = dostring("return ".. json_getbson(sJson));

	local tAllSeries = tBson.results[0].series;
	local iSeries;
	if (sSensor == "-")
		iSeries = 0;
	else
		{
		iSeries = -1;
		for i = 0, getn(tAllSeries) - 1 do
			{
			local tSeries = tAllSeries[i];
			local tTags = tSeries.tags;
			if ("displayName" in tTags && tTags.displayName == sSensor)
				{
				iSeries = i;
				break;
				}
			}
		if (iSeries < 0)
			{
			write(_STDERR, format("couldn't find displayName: %s\n", sSensor));
			exit(1);
			}
		}
	local tSeries = tAllSeries[iSeries];

	putRow(tSeries.columns);

	// we know column[0] is the time; we'll output as an excel date
	// the UTC epoch is 25569 for Excel
	local excelEpoch = 25569

	local tValues = tSeries.values;
	for i = 0, getn(tValues)-1 do
		{
		local row = tValues[i];

		local tDate, sErr, tParse = %Lib.ParseDateString(gsub(row[0], "^(.*)T(.*)Z", "%1 %2"));
		if (tDate == NULL)
			{
			print(sErr);
			%Lib.Pretty(.tParse, tParse);
			}

		row[0] = (%Lib.ParsedDateToPosix(tDate)/(24*60*60) + excelEpoch);

		putRow(row);
		}

	return 0;
	}
