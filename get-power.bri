#!/usr/bin/env bright

/*

Module:	get-power.bri

Function:
	Extract cumulative power values from a JSON file from an InfluxDB query.

Copyright:
	See LICENSE file.

Author:
	Terry Moore, MCCI Corporation

Description:
	This function compensates for the limited resolution of over-the-air
	and in-database power kWh counts, by searching the database looking for
	roll-overs (where the next count is less than the previous count). The
	count is then multiplied by the maximum and added to the last value,
	giving the "end value". The beginning value is then subtracted, giving
	the total.

*/

/*

Name:	json_getbson()

Function:
	Return the Bright equivalent of a JSON string.

Definition:
	function json_getbson(
		STRING sJson
		) -> STRING;

Description:
	The input string is converted to a Bright object
	representation, and returned as a string.

*/

function json_getbson(sJson)
	{
	// 1) convert [] to {}
	local sBson = gsub(sJson, "%[", "{");
	sBson = gsub(sBson, "%]", "}");
	// 2) convert "string": to [ "string" ] =
	sBson = gsub(sBson, "(\"[^\"]*\")%s*:", "[ %1 ] =" )
	return sBson;
	}

function filetostring(sF)
	{ 
	local hFile, sError;
	hFile, sError = openfile(sF, "r"); 
	if (hFile == NULL) return NULL, sError; 
	local sResult; 
	sResult, sError=read(hFile, "*a"); 
	closefile(hFile); 
	return sResult, sError;
	}

function getPower(tSeries, sVar, kRollover)
	{
	// find index of powerUsed
	for iName, vName in tSeries.columns do
		{
		if (vName == sVar)
			{
			iVar = iName;
			break;
			}
		}

	local tValues = tSeries.values;

	local nRollovers = 0;

	for i = 1, getn(tValues)-1 do
		{
		if (tValues[i][iVar] < tValues[i-1][iVar])
			nRollovers = nRollovers + 1;
		}
	
	local nTotalPower;

	nTotalPower = nRollovers * 65536 * kRollover + tValues[getn(tValues)-1][iVar] - tValues[0][iVar];

	return nTotalPower, tValues[0][0], tValues[getn(tValues)-1][0];
	}

function main(args)
	{
	// args[1] is the input JSON file.
	// args[2] is the power multiplier.
	// args[3] is the name of the powerUsed variable.
	local sVar; // name of the column with our data
	local iVar; // index of the column with our data

	if (getn(args) < 3)
		{
		write(_STDERR, "too few arguments\n");
		exit(1);
		}
	else if (getn(args) == 3)
		{
		sVar = "powerUsed"
		}

	local kRollover, sRollover;
	sRollover = args[2];
	kRollover = tonumber(sRollover);
	if (type(kRollover) != "number")
		{
		write(_STDERR, "not a number: %s\n", sRollover);
		}
	local sJson, sError;
	sJson, sError = filetostring(args[1]);

	if (sError)
		{
		write(_STDERR, format("can't read %s: %s\n", args[1], sError));
		exit(1);
		}

	local tBson = dostring("return ".. json_getbson(sJson));

	local tSeries = tBson.results[0].series[0];
	local nPower, sStart, sEnd = getPower(tSeries, sVar, kRollover);

	write(_STDOUT, format("Power used: Device %s Series %s: %.5f MWh from %s to %s\n", 
				tSeries.tags.devID, sVar, 
				nPower / 1e6,
				sStart, sEnd
				)
	     );

	return 0;
	}
